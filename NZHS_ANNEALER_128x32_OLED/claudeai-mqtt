#include <WiFiNINA.h>
#include <PubSubClient.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <EEPROM.h>
#include <avr/wdt.h>

// ... (keep all the existing #define statements)

// MQTT Configuration
const char* ssid = "YourWiFiSSID";
const char* password = "YourWiFiPassword";
const char* mqtt_server = "YourMQTTBrokerAddress";
const int mqtt_port = 1883;
const char* mqtt_client_id = "ArduinoAnnealer";
const char* mqtt_username = "YourMQTTUsername";
const char* mqtt_password = "YourMQTTPassword";

// MQTT Topics
const char* topic_start_stop = "annealer/start_stop";
const char* topic_anneal_time = "annealer/anneal_time";
const char* topic_state = "annealer/state";
const char* topic_temperature = "annealer/temperature";

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

// ... (keep all the existing variable declarations)

void setup() {
  // ... (keep all the existing setup code)

  // Set up WiFi and MQTT
  setupWiFi();
  mqttClient.setServer(mqtt_server, mqtt_port);
  mqttClient.setCallback(mqttCallback);
}

void loop() {
  // ... (keep all the existing loop code)

  // Handle MQTT connection and loop
  if (!mqttClient.connected()) {
    reconnectMQTT();
  }
  mqttClient.loop();

  // Publish state and temperature periodically
  static unsigned long lastPublish = 0;
  if (millis() - lastPublish > 5000) {
    publishState();
    publishTemperature();
    lastPublish = millis();
  }
}

void setupWiFi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnectMQTT() {
  while (!mqttClient.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (mqttClient.connect(mqtt_client_id, mqtt_username, mqtt_password)) {
      Serial.println("connected");
      mqttClient.subscribe(topic_start_stop);
      mqttClient.subscribe(topic_anneal_time);
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  String message = "";
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  if (String(topic) == topic_start_stop) {
    if (message == "START") {
      // Simulate start button press
      if (g_SystemState == STATE_STOPPED) {
        updateSystemState(STATE_ANNEALING);
      }
    } else if (message == "STOP") {
      // Simulate stop button press
      if (g_SystemState != STATE_STOPPED) {
        Next_Cycle_Is_STOPPED = 1;
      }
    }
  } else if (String(topic) == topic_anneal_time) {
    uint16_t newAnnealTime = message.toInt();
    if (newAnnealTime >= MIN_ANNEAL_TIME && newAnnealTime <= MAX_ANNEAL_TIME) {
      AnnealTime_ms = newAnnealTime;
      annealTimeChanged = true;
    }
  }
}

void publishState() {
  String stateStr;
  switch (g_SystemState) {
    case STATE_STOPPED:
      stateStr = "STOPPED";
      break;
    case STATE_ANNEALING:
      stateStr = "ANNEALING";
      break;
    case STATE_DROPPING:
      stateStr = "DROPPING";
      break;
    case STATE_RELOADING:
      stateStr = "RELOADING";
      break;
    case STATE_COOLDOWN:
      stateStr = "COOLDOWN";
      break;
    default:
      stateStr = "UNKNOWN";
  }
  mqttClient.publish(topic_state, stateStr.c_str());
}

void publishTemperature() {
  char tempStr[10];
  dtostrf(temperature, 4, 1, tempStr);
  mqttClient.publish(topic_temperature, tempStr);
}

// ... (keep all the existing functions)
